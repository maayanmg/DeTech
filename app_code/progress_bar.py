# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'app_code\progress_bar.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# -- sample for worker
# https://realpython.com/python-pyqt-qthread/

# -- sample for signal & slots
# https://stackoverflow.com/questions/64343633/how-to-return-a-variable-from-another-window-in-pyqt
from PyQt5.QtWidgets import (QProgressBar, QLabel)
import sys
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import (
    QApplication,
    QPushButton,
    QVBoxLayout,
)
from PyQt5.QtCore import QObject, QThread, pyqtSignal
from PyQt5 import QtCore, QtGui, QtWidgets

class Worker(QObject):

    def __init__(self, caller):
        super().__init__()
        self.the_caller = caller

    finished = pyqtSignal()
    progress = pyqtSignal(int)
    response_tuple = None

    #A fucntion that runs the caller function. It informs when the function is finished.
    def run(self):
        """Long-running task."""
        self.response_tuple = self.the_caller.funcForBackgroundWorker(self.the_caller.inParams[0])
        # for i in range(5):
        #     sleep(1)
        #     self.progress.emit(i + 1)

        self.finished.emit()

class Worker_Dialog(object):

    def __init__(self, Dialog, parent=None):
        self.clicksCount = 0
        self.dialog = Dialog

    # A function that receives Dialog, client, func_for_background_worker, parameters_tuple, func_for_callback. The function builds the dialog with its details
    def setupUi(self, Dialog, client, func_for_background_worker, parameters_tuple, func_for_callback):
        self.funcForBackgroundWorker = func_for_background_worker
        self.funcForCallback = func_for_callback
        self.inParams = parameters_tuple
        self.theClient = client
        Dialog.setWindowTitle("Diagnose pneumonia")
        Dialog.resize(300, 100)
        Dialog.setModal(True)
        # Create and connect widgets
        self.diagnose_x_ray_btn = QPushButton("Detect", Dialog)
        self.diagnose_x_ray_btn.setStyleSheet("background-color: rgb(14, 154, 175);\n"
                                    "color: rgb(255,255,255);\n"
                                    "font-size: 12pt\n"
                                    "")
        self.diagnose_x_ray_btn.setMaximumWidth(90)
        self.diagnose_x_ray_btn.clicked.connect(self.run_long_task)
        self.clicksLabel = QLabel("An X-ray file found, click the Detect button to predict pneumonia", Dialog)
        self.clicksLabel.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
        self.clicksLabel.setGeometry(QtCore.QRect(10, 10, 10, 10))
        self.clicksLabel.setStyleSheet("font-size: 12pt\n")
        self.progress = QProgressBar(Dialog)
        self.progress.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
        self.progress.setMaximum(0)
        self.progress.hide()

        # Set the layout
        layout = QVBoxLayout()
        layout.addWidget(self.clicksLabel)
        layout.addWidget(self.diagnose_x_ray_btn)
        layout.addWidget(self.progress)
        layout.addStretch()
        Dialog.setLayout(layout)

    #A function that starts a new thread, runs the worker, shows the progress and the calls after_worker_finished when the finction is finished
    def run_long_task(self):
        self.progress.show()
        # Step 2: Create a QThread object
        self.thread = QThread()
        # Step 3: Create a worker object
        self.worker = Worker(self)
        # Step 4: Move worker to the thread
        self.worker.moveToThread(self.thread)
        # Step 5: Connect signals and slots
        self.thread.started.connect(self.worker.run)
        self.worker.finished.connect(self.thread.quit)
        self.worker.finished.connect(self.worker.deleteLater)
        self.thread.finished.connect(self.thread.deleteLater)
        # Step 6: Start the thread
        self.thread.start()

        # Final resets
        self.diagnose_x_ray_btn.setEnabled(False)

        self.thread.finished.connect(
            lambda: self.after_worker_finished()
        )

    #A function that is called after the run_long_task is finished. The function is calling to the callback function.
    def after_worker_finished(self):
        self.funcForCallback(self.worker.response_tuple, self.theClient)
        self.diagnose_x_ray_btn.setEnabled(True)
        self.progress.hide()
        self.dialog.close()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    workDlg = QtWidgets.QDialog()
    ui = Worker_Dialog(workDlg)
    workDlg.show()
    sys.exit(app.exec())