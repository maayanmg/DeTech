# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'report_case.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
from PyQt5 import QtCore, QtGui, QtWidgets
import results_Dialog
import send_curl
import progress_bar
from PIL import Image

class Ui_Report_a_visit_Dialog(object):
    can_add_photo = True
    view_mode = False

    #A function that receives  MainWindow, client. The function builds the dialog with its details
    def setupUi(self, Dialog, client, main_win, doctor_id):
        self.patient_dialog = Dialog
        self.main_window = main_win
        self.doctor_id= doctor_id
        self.view_mode = False

        Dialog.setObjectName("Dialog")
        Dialog.resize(529, 751)
        Dialog.setAutoFillBackground(False)
        Dialog.setStyleSheet("background-color: rgb(54, 54, 54);")
        Dialog.setInputMethodHints(QtCore.Qt.ImhNone)
        self.visit_date_text = QtWidgets.QLabel(Dialog)
        self.visit_date_text.setGeometry(QtCore.QRect(20, 530, 121, 16))
        self.visit_date_text.setStyleSheet("color: rgb(255,255,255);\n"
                                           "font-size: 12pt")
        self.visit_date_text.setObjectName("label_7")
        self.email_text = QtWidgets.QLabel(Dialog)
        self.email_text.setGeometry(QtCore.QRect(20, 210, 111, 21))
        self.email_text.setStyleSheet("color: rgb(255,255,255);\n"
                                      "font-size: 12pt")
        self.email_text.setObjectName("label_9")
        self.lineEdit_full_name = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_full_name.setGeometry(QtCore.QRect(20, 110, 391, 31))
        self.lineEdit_full_name.setAutoFillBackground(False)
        self.lineEdit_full_name.setStyleSheet("background-color: rgb(197,197,197);\n"
                                              "color: rgb(42, 42, 42);\n"
                                              "font-size: 12pt\n"
                                              "")
        self.lineEdit_full_name.setText("")
        self.lineEdit_full_name.setPlaceholderText("")
        self.lineEdit_full_name.setObjectName("lineEdit_1")
        self.lineEdit_id = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_id.setGeometry(QtCore.QRect(20, 170, 391, 31))
        self.lineEdit_id.setAutoFillBackground(False)
        self.lineEdit_id.setStyleSheet("background-color: rgb(197,197,197);\n"
                                       "color: rgb(42, 42, 42);\n"
                                       "font-size: 12pt\n"
                                       "")
        self.lineEdit_id.setInputMethodHints(QtCore.Qt.ImhSensitiveData)
        self.lineEdit_id.setText("")
        self.lineEdit_id.setPlaceholderText("")
        self.lineEdit_id.setObjectName("lineEdit_2")
        self.lineEdit_email = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_email.setGeometry(QtCore.QRect(20, 230, 391, 31))
        self.lineEdit_email.setAutoFillBackground(False)
        self.lineEdit_email.setStyleSheet("background-color: rgb(197,197,197);\n"
                                          "color: rgb(42, 42, 42);\n"
                                          "font-size: 12pt")
        self.lineEdit_email.setInputMethodHints(QtCore.Qt.ImhSensitiveData)
        self.lineEdit_email.setText("")
        self.lineEdit_email.setPlaceholderText("")
        self.lineEdit_email.setObjectName("lineEdit_3")
        self.add_patient_heading_text = QtWidgets.QLabel(Dialog)
        self.add_patient_heading_text.setGeometry(QtCore.QRect(20, 10, 331, 71))
        self.add_patient_heading_text.setStyleSheet("background-color: rgb(54,54,54);\n"
                                                    "color: rgb(255, 255, 255);\n"
                                                    "font: 75 28pt \"MS Shell Dlg 2\";")
        self.add_patient_heading_text.setObjectName("label_3")
        self.watch_patient_heading_text = QtWidgets.QLabel(Dialog)
        self.watch_patient_heading_text.setGeometry(QtCore.QRect(20, 10, 331, 71))
        self.watch_patient_heading_text.setStyleSheet("background-color: rgb(54,54,54);\n"
                                                      "color: rgb(255, 255, 255);\n"
                                                      "font: 75 28pt \"MS Shell Dlg 2\";")
        self.watch_patient_heading_text.setObjectName("label_3")
        self.add_patient_heading_text.raise_()
        self.id_text = QtWidgets.QLabel(Dialog)
        self.id_text.setGeometry(QtCore.QRect(20, 150, 111, 16))
        self.id_text.setStyleSheet("color: rgb(255,255,255);\n"
                                   "font-size: 12pt")
        self.id_text.setObjectName("label_5")
        self.description_text = QtWidgets.QLabel(Dialog)
        self.description_text.setGeometry(QtCore.QRect(20, 390, 181, 16))
        self.description_text.setStyleSheet("color: rgb(255,255,255);\n"
                                            "font-size: 12pt")
        self.description_text.setObjectName("label_8")

        self.full_name_text = QtWidgets.QLabel(Dialog)
        self.full_name_text.setGeometry(QtCore.QRect(20, 90, 191, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.full_name_text.setFont(font)
        self.full_name_text.setStyleSheet("color: rgb(255,255,255);\n"
                                          "font-size: 12pt")
        self.full_name_text.setObjectName("label_4")
        self.description_textEdit = QtWidgets.QTextEdit(Dialog)
        self.description_textEdit.setGeometry(QtCore.QRect(20, 410, 491, 111))
        self.description_textEdit.setStyleSheet("background-color: rgb(197,197,197);\n"
                                                "color: rgb(42, 42, 42);\n"
                                                "font-size: 12pt")
        self.description_textEdit.setObjectName("textEdit")
        self.save_btn = QtWidgets.QPushButton(Dialog)
        self.save_btn.setGeometry(QtCore.QRect(20, 700, 131, 31))
        self.save_btn.setStyleSheet("background-color: rgb(14, 154, 175);\n"
                                    "color: rgb(255,255,255);\n"
                                    "font-size: 18pt\n"
                                    "")
        self.save_btn.setObjectName("pushButton_2")
        self.x_ray_text = QtWidgets.QLabel(Dialog)
        self.x_ray_text.setGeometry(QtCore.QRect(20, 600, 171, 16))
        self.x_ray_text.setStyleSheet("color: rgb(255,255,255);\n"
                                      "font-size: 12pt")
        self.x_ray_text.setObjectName("label_10")
        self.birth_dateEdit = QtWidgets.QDateEdit(Dialog, calendarPopup=True)
        self.birth_dateEdit.setGeometry(QtCore.QRect(20, 350, 171, 31))
        self.birth_dateEdit.setStyleSheet("background-color: rgb(197,197,197);\n"
                                          "color: rgb(42, 42, 42);\n"
                                          "font-size: 12pt")
        self.birth_dateEdit.setObjectName("dateEdit")
        self.visit_dateEdit = QtWidgets.QDateEdit(Dialog, calendarPopup=True)
        self.visit_dateEdit.setGeometry(QtCore.QRect(20, 550, 171, 31))
        self.visit_dateEdit.setStyleSheet("background-color: rgb(197,197,197);\n"
                                          "color: rgb(42, 42, 42);\n"
                                          "font-size: 12pt")
        self.visit_dateEdit.setObjectName("dateEdit_2")
        self.lineEdit_photo_path = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_photo_path.setGeometry(QtCore.QRect(20, 630, 491, 31))
        self.lineEdit_photo_path.setAutoFillBackground(False)
        self.lineEdit_photo_path.setStyleSheet("background-color: rgb(197,197,197);\n"
                                               "color: rgb(42, 42, 42);\n"
                                               "font-size: 12pt")
        self.lineEdit_photo_path.setInputMethodHints(QtCore.Qt.ImhSensitiveData)
        self.lineEdit_photo_path.setText("")
        self.lineEdit_photo_path.setPlaceholderText("")
        self.lineEdit_photo_path.setObjectName("lineEdit_4")
        self.lineEdit_photo_path.setEnabled(True)
        self.fill_fields_text = QtWidgets.QLabel(Dialog)
        self.fill_fields_text.setGeometry(QtCore.QRect(20, 670, 221, 21))
        self.fill_fields_text.setStyleSheet("background-color: rgb(54,54,54);\n"
                                            "color: rgb(255, 255, 255);\n"
                                            "font: 75 12pt \"MS Shell Dlg 2\";")
        self.fill_fields_text.setObjectName("label_11")
        self.birth_date_text = QtWidgets.QLabel(Dialog)
        self.birth_date_text.setGeometry(QtCore.QRect(20, 330, 121, 16))
        self.birth_date_text.setStyleSheet("color: rgb(255,255,255);\n"
                                           "font-size: 12pt")
        self.birth_date_text.setObjectName("label_12")
        self.gender_text = QtWidgets.QLabel(Dialog)
        self.gender_text.setGeometry(QtCore.QRect(20, 270, 111, 21))
        self.gender_text.setStyleSheet("color: rgb(255,255,255);\n"
                                       "font-size: 12pt")
        self.gender_text.setObjectName("label_13")

        self.comboBox = QtWidgets.QComboBox(Dialog)
        self.comboBox.setGeometry(QtCore.QRect(20, 290, 101, 31))
        self.comboBox.setStyleSheet("background-color: rgb(197,197,197);\n"
                                    "color: rgb(42, 42, 42);\n"
                                    "font-size: 12pt")
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.add_photo_btn = QtWidgets.QPushButton(Dialog)
        self.add_photo_btn.setGeometry(QtCore.QRect(190, 600, 61, 21))
        self.add_photo_btn.setStyleSheet("background-color: rgb(14, 154, 175);\n"
                                         "color: rgb(255,255,255);\n"
                                         "font-size: 12pt\n"
                                         "")
        self.add_photo_btn.setObjectName("pushButton_3")
        self.invalid_id_text = QtWidgets.QLabel(Dialog)
        self.invalid_id_text.setGeometry(QtCore.QRect(20, 670, 221, 21))
        self.invalid_id_text.setStyleSheet("background-color: rgb(54,54,54);\n"
                                           "color: rgb(255, 255, 255);\n"
                                           "font: 75 12pt \"MS Shell Dlg 2\";")
        self.invalid_id_text.setObjectName("label_1")
        self.invalid_id_text.hide()
        self.invalid_email_text = QtWidgets.QLabel(Dialog)
        self.invalid_email_text.setGeometry(QtCore.QRect(20, 670, 221, 21))
        self.invalid_email_text.setStyleSheet("background-color: rgb(54,54,54);\n"
                                              "color: rgb(255, 255, 255);\n"
                                              "font: 75 12pt \"MS Shell Dlg 2\";")
        self.invalid_email_text.setObjectName("label_2")
        self.invalid_email_text.hide()
        self.birth_dateEdit.setDisplayFormat("dd-MM-yyyy")
        self.birth_dateEdit.setDateTime(QtCore.QDateTime.currentDateTime())
        self.visit_dateEdit.setDisplayFormat("dd-MM-yyyy")
        self.visit_dateEdit.setDateTime(QtCore.QDateTime.currentDateTime())
        self.fill_fields_text.hide()

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        self.add_photo_btn.clicked.connect(lambda: self.select_X_ray(main_win))
        self.save_btn.clicked.connect(lambda: self.handle_save_btn_click(client))

    #A function that receives client. The function gets the fields from the lines and does a validation. The function checks if x_ray_detection is necessary. If yes, the function calls the worker and the progress bar. Id not, the function saves the patient's details.
    def handle_save_btn_click(self, client):
        full_name = self.lineEdit_full_name.text()
        ID = self.lineEdit_id.text()
        email = self.lineEdit_email.text()
        case_description = self.description_textEdit.toPlainText()

        # checks if all the fields were filled
        if full_name == '' or ID == '' or email == '' or case_description == '':
            self.fill_fields_text.show()
            self.fill_fields_text.raise_()
            return
        # checks: if the length of the id is valid, if the string contains only number and if the id is someome's else
        if len(ID) != 9 or not ID.isnumeric():
            self.invalid_id_text.show()
            self.invalid_id_text.raise_()
            return
        if not self.view_mode:
            if not self.check_ID(client, ID, self.doctor_id):
                self.invalid_id_text.show()
                self.invalid_id_text.raise_()
                return
        if not client.check_email(email):
            self.invalid_email_text.show()
            self.invalid_email_text.raise_()
            return

        photo_path = self.lineEdit_photo_path.text()
        parameters_tuple = (photo_path, True)

        if self.main_window.the_app_config.is_using_debug_values():
            parameters_tuple = (self.main_window.the_app_config.get_string_value('debug', 'xray_path'), True)

        if parameters_tuple[0] == '' or not self.can_add_photo:
            self.save_patient(None, client)
        else:
            print(parameters_tuple)
            self.worker_dialog = QtWidgets.QDialog()
            self.ui = progress_bar.Worker_Dialog(self.worker_dialog)
            self.ui.setupUi(self.worker_dialog, client, send_curl.send_curl, parameters_tuple, self.save_patient)
            self.worker_dialog.show()

    # A function that receives res_tuple_pneumonia, client. The function gets the fields from the lines and sends the details of the patient to the server. If an x-ray was uploaded the function would send it to the web server. The function will close the Dialog at the end of the function.
    def save_patient(self, res_tuple_pneumonia, client):
        full_name = self.lineEdit_full_name.text()
        ID = self.lineEdit_id.text()
        email = self.lineEdit_email.text()
        birth_date = self.birth_dateEdit.date()
        birth_date = str(str(birth_date.toPyDate()))
        gender = self.comboBox.currentText()
        visit_date = self.visit_dateEdit.date()
        visit_date = str(str(visit_date.toPyDate()))
        case_description = self.description_textEdit.toPlainText()
        photo_path = self.lineEdit_photo_path.text()

        is_pneumonia, x_ray_detection = self.main_window.get_pneumonia_probability(res_tuple_pneumonia)
        show_results = True

        if photo_path != '' and not self.can_add_photo:
            x_ray_detection = photo_path
            show_results = False

        if photo_path != '' and self.can_add_photo:
            self.can_add_photo = False
            self.resize_and_save_photo(photo_path, ID)

        client.add_patient(full_name, ID, email, gender, birth_date, case_description, visit_date, str(x_ray_detection), self.doctor_id)
        if show_results and not self.can_add_photo:
            self.open_results_Dialog()
            if is_pneumonia is not None:
                if self.view_mode:
                    self.ui.turn(is_pneumonia, "edit")
                else:
                    self.ui.turn(is_pneumonia, "add")
        self.main_window.clear_table()
        self.main_window.fill_table(client)

        self.patient_dialog.close()

    # A function that receives a photo path and patient_id. The function resizes the image and saves it in the "x_ray_stats" folder.
    def resize_and_save_photo(self, photo_path, ID):
        img = Image.open(photo_path)
        img.thumbnail((150, 100))
        os.makedirs('x_ray_stats', exist_ok=True)
        image_path = "x_ray_stats"
        img.save(f"{image_path}/" + ID + ".jpeg")

    # A function that receives a photo path, and sends an HTTP request to the web server. The function returns the detection of the photo by the AI model.
    def send_curl(self, photo_path):
        return send_curl.send_curl(photo_path)

    #A function that receives client, ID, doctor_id. The
    def check_ID(self, client, ID, doctor_id):
        patient_list = client.get_patients_list(doctor_id)
        if patient_list is None:
            return True
        for row in patient_list:
            row = row.split('#')
            if row[1] == ID:
                return False
        return True

    #A function that opens the results dialog
    def open_results_Dialog(self):
        self.dialog = QtWidgets.QDialog()
        self.ui = results_Dialog.Ui_Results_Dialog()
        self.ui.setupUi(self.dialog)
        self.dialog.show()

    # A function that receives the main_window. The function call to anouther function that ask the user to choose x-ray photo from the computer. The function updates the lineEdit of the photo path with the path the user selected.
    def select_X_ray(self, main_win):
        _translate = QtCore.QCoreApplication.translate
        photo_path = main_win.get_file_name()
        self.lineEdit_photo_path.setText(_translate("Dialog", photo_path))

    #A function that receives client, patient_id. The function changes the display into view mode. It puts the details of the selected patient in the appropriate fields.
    def turn_into_show_patient_mode(self, client, patient_id):
        self.view_mode = True
        self.fill_fields_text.raise_()
        self.watch_patient_heading_text.raise_()
        self.lineEdit_full_name.setEnabled(False)
        self.lineEdit_id.setEnabled(False)
        self.comboBox.setEnabled(False)
        self.birth_dateEdit.setEnabled(False)
        patient = client.get_specific_patient(patient_id)
        if patient is None:
            return
        spllited_patient = patient.split('#')
        _translate = QtCore.QCoreApplication.translate
        self.lineEdit_full_name.setText(_translate("Dialog", spllited_patient[0]))
        self.lineEdit_id.setText(_translate("Dialog", spllited_patient[1]))
        self.lineEdit_email.setText(_translate("Dialog", spllited_patient[2]))
        if spllited_patient[3] == "Female":
            self.comboBox.setCurrentIndex(1)
        birth_date = self.from_string_to_date(spllited_patient[4].split('-'))
        self.birth_dateEdit.setDate(birth_date)
        self.description_textEdit.setText(_translate("Dialog", spllited_patient[5]))
        visit_date = self.from_string_to_date(spllited_patient[6].split('-'))
        self.visit_dateEdit.setDate(visit_date)
        if len(spllited_patient) > 8:
                self.can_add_photo = False
                self.birth_date_text.raise_()
                self.add_photo_btn.setEnabled(False)
                self.lineEdit_photo_path.setEnabled(False)
                self.lineEdit_photo_path.setText(_translate("Dialog", spllited_patient[8]))

    #A function that receives a date(string) spllited in a list. The function returns the date as a QDate type.
    def from_string_to_date(self, spllited_date):
        str_date = spllited_date[2] + spllited_date[1] + spllited_date[0]
        date = QtCore.QDate.fromString(str_date, 'ddMMyyyy')
        return date

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.visit_date_text.setText(_translate("Dialog", "Visit date:"))
        self.email_text.setText(_translate("Dialog", "E-mail:"))
        self.add_patient_heading_text.setText(_translate("Dialog", "Report a visit"))
        self.watch_patient_heading_text.setText(_translate("Dialog", "Patient's details"))
        self.id_text.setText(_translate("Dialog", "ID:"))
        self.description_text.setText(_translate("Dialog", "Description of the case:"))
        self.full_name_text.setText(_translate("Dialog", "Full name:"))
        self.save_btn.setText(_translate("Dialog", "Save"))
        self.x_ray_text.setText(_translate("Dialog", "X-ray photo (Optional):"))
        self.fill_fields_text.setText(_translate("Dialog", "please fill all the fields!"))
        self.birth_date_text.setText(_translate("Dialog", "Birth date:"))
        self.gender_text.setText(_translate("Dialog", "Gender:"))
        self.comboBox.setItemText(0, _translate("Dialog", "Male"))
        self.comboBox.setItemText(1, _translate("Dialog", "Female"))
        self.add_photo_btn.setText(_translate("Dialog", "add"))
        self.invalid_id_text.setText(_translate("Dialog", "please enter a valid ID!"))
        self.invalid_email_text.setText(_translate("Dialog", "please enter a valid email!"))